import os
import time
import re
import sys
import random
import concurrent.futures

from googleapiclient.discovery import build
from googleapiclient.errors import HttpError


# ========== CONFIG ==========
MAX_WORKERS = 5   # s·ªë thread ch·∫°y song song, b·∫°n c√≥ th·ªÉ ch·ªânh 3‚Äì7
OUTPUT_DIR = "output"

# X√°c ƒë·ªãnh th∆∞ m·ª•c ch·ª©a file .exe ho·∫∑c script Python
if getattr(sys, 'frozen', False):
    BASE_DIR = os.path.dirname(sys.executable)  # Th∆∞ m·ª•c ch·ª©a file .exe
else:
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # Th∆∞ m·ª•c ch·ª©a script .py

GOOGLE_CREDENTIALS = os.path.join(BASE_DIR, "Google.json")

# Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
if not os.path.exists(GOOGLE_CREDENTIALS):
    print(f"‚ùå Kh√¥ng t√¨m th·∫•y Google.json! ƒê·∫∑t n√≥ c√πng th∆∞ m·ª•c v·ªõi file .exe ho·∫∑c script.")
    input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
    sys.exit(1)

os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = GOOGLE_CREDENTIALS
print(f"‚úÖ ƒê√£ t√¨m th·∫•y Google.json t·∫°i: {GOOGLE_CREDENTIALS}")

os.makedirs(OUTPUT_DIR, exist_ok=True)


# ========== AUTH ==========
def authenticate_drive():
    """X√°c th·ª±c Google Drive API"""
    return build("drive", "v3")


def authenticate_docs():
    """X√°c th·ª±c Google Docs API"""
    return build("docs", "v1")


# ========== UTIL ==========
def read_input_file():
    """ƒê·ªçc danh s√°ch link t·ª´ input.txt"""
    input_file = os.path.join(BASE_DIR, "input.txt")

    if not os.path.exists(input_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y input.txt t·∫°i: {input_file}")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        sys.exit(1)

    print(f"‚úÖ ƒê√£ t√¨m th·∫•y input.txt t·∫°i: {input_file}")

    with open(input_file, "r", encoding="utf-8") as f:
        drive_links = [line.strip() for line in f if line.strip()]

    if not drive_links:
        print("‚ùå input.txt kh√¥ng ch·ª©a link h·ª£p l·ªá!")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        sys.exit(1)

    print("üìÇ Danh s√°ch th∆∞ m·ª•c Google Drive c·∫ßn x·ª≠ l√Ω:")
    for link in drive_links:
        print(f"- {link}")

    return drive_links


def extract_folder_id(drive_link):
    """Tr√≠ch xu·∫•t Folder ID t·ª´ ƒë∆∞·ªùng link Google Drive"""
    match = re.search(r"folders/([\w-]+)", drive_link)
    return match.group(1) if match else None


def extract_number_from_filename(filename):
    """Tr√≠ch xu·∫•t s·ªë th·ª© t·ª± t·ª´ t√™n file (v√≠ d·ª•: '01.webp' -> 1)"""
    match = re.search(r'\d+', filename)
    return int(match.group()) if match else float('inf')


def list_subfolders(drive_service, parent_folder_id):
    """L·∫•y danh s√°ch th∆∞ m·ª•c con"""
    query = f"'{parent_folder_id}' in parents and mimeType = 'application/vnd.google-apps.folder'"
    results = drive_service.files().list(q=query, fields="files(id, name)").execute()
    subfolders = results.get("files", [])
    subfolders.sort(key=lambda folder: extract_number_from_filename(folder["name"]))
    return subfolders


def list_images_in_drive_folder(drive_service, folder_id):
    """L·∫•y danh s√°ch ·∫£nh trong th∆∞ m·ª•c tr√™n Google Drive"""
    query = f"'{folder_id}' in parents and mimeType contains 'image/'"
    results = drive_service.files().list(q=query, fields="files(id, name)").execute()
    images = results.get("files", [])
    images.sort(key=lambda img: extract_number_from_filename(img["name"]))
    return images


# ========== OCR ==========
def convert_image_to_google_doc(drive_service, file_id, file_name, retry_attempts=3):
    """Chuy·ªÉn ·∫£nh th√†nh Google Docs (OCR) v·ªõi Retry khi g·∫∑p l·ªói 500"""
    for attempt in range(retry_attempts):
        try:
            new_file = drive_service.files().copy(
                fileId=file_id,
                body={
                    "mimeType": "application/vnd.google-apps.document",
                    "name": f"OCR_{file_name}"
                }
            ).execute()
            print(f"üìÑ ƒê√£ t·∫°o Google Docs t·ª´ ·∫£nh: {file_name}")
            return new_file["id"]
        except HttpError as e:
            if e.resp.status == 500:
                print(f"‚ö†Ô∏è L·ªói 500, th·ª≠ l·∫°i l·∫ßn ({attempt + 1}/{retry_attempts}) cho ·∫£nh: {file_name}")
                time.sleep(5)
            else:
                break
    print(f"‚ùå B·ªè qua ·∫£nh: {file_name} do l·ªói khi chuy·ªÉn th√†nh Google Docs")
    return None


def extract_text_from_google_doc(docs_service, doc_id):
    """Tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ Google Docs ƒë√£ OCR"""
    time.sleep(random.uniform(6, 9))  # delay ƒë·ªÉ ch·ªù Google OCR k·ªãp x·ª≠ l√Ω
    try:
        document = docs_service.documents().get(documentId=doc_id).execute()
        content = document.get("body", {}).get("content", [])
        extracted_text = ""
        for elem in content:
            if "paragraph" in elem:
                for text_run in elem["paragraph"].get("elements", []):
                    extracted_text += text_run.get("textRun", {}).get("content", "")
        return extracted_text.strip()
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc Google Docs ID {doc_id}: {e}")
        return ""


def delete_google_doc(drive_service, doc_id):
    """X√≥a Google Docs sau khi tr√≠ch xu·∫•t vƒÉn b·∫£n"""
    try:
        drive_service.files().delete(fileId=doc_id).execute()
        print(f"üóëÔ∏è ƒê√£ x√≥a Google Docs ID: {doc_id}")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi x√≥a file {doc_id}: {e}")


def process_single_image(image, index):
    """X·ª≠ l√Ω m·ªôt ·∫£nh: OCR -> l·∫•y text -> x√≥a Docs"""
    drive_service = authenticate_drive()
    docs_service = authenticate_docs()

    file_id = image["id"]
    file_name = image["name"]

    print(f"üñº ƒêang x·ª≠ l√Ω ·∫£nh: {file_name} (ID: {file_id})")
    doc_id = convert_image_to_google_doc(drive_service, file_id, file_name)

    if not doc_id:
        return index, f"‚ùå {file_name}", True

    text = extract_text_from_google_doc(docs_service, doc_id)
    delete_google_doc(drive_service, doc_id)

    return index, f"\n\n{file_name}\n\n{text}", False


# ========== LU·ªíNG X·ª¨ L√ù ==========
def process_images_from_folder(folder_id, folder_name):
    """X·ª≠ l√Ω t·∫•t c·∫£ ·∫£nh trong m·ªôt th∆∞ m·ª•c c·ª• th·ªÉ tr√™n Google Drive"""
    drive_service = authenticate_drive()
    images = list_images_in_drive_folder(drive_service, folder_id)

    if not images:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong th∆∞ m·ª•c: {folder_name}")
        return

    results = {}
    error_log = []

    with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        future_to_index = {
            executor.submit(process_single_image, image, idx): idx
            for idx, image in enumerate(images)
        }
        for future in concurrent.futures.as_completed(future_to_index):
            try:
                idx, result, is_error = future.result()
                results[idx] = result
                if is_error:
                    error_log.append(result)
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

    # S·∫Øp x·∫øp l·∫°i theo index ƒë·ªÉ gi·ªØ ƒë√∫ng th·ª© t·ª± ·∫£nh
    all_text = "\n".join([results[i] for i in sorted(results.keys())])

    output_file = os.path.join(OUTPUT_DIR, f"extracted_text_{folder_name}.txt")
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(all_text)

    if error_log:
        with open("Error.txt", "a", encoding="utf-8") as f:
            f.write(f"\n=== Th∆∞ m·ª•c: {folder_name} ===\n" + "\n".join(error_log))

    print(f"‚úÖ Ho√†n th√†nh! K·∫øt qu·∫£ l∆∞u t·∫°i: {output_file}")


def process_all_folders():
    """X·ª≠ l√Ω to√†n b·ªô danh s√°ch folder trong input.txt"""
    drive_service = authenticate_drive()
    folder_links = read_input_file()

    for link in folder_links:
        folder_id = extract_folder_id(link)
        if not folder_id:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ tr√≠ch xu·∫•t Folder ID t·ª´ link: {link}")
            continue

        print(f"üìÇ ƒêang x·ª≠ l√Ω th∆∞ m·ª•c: {link}")

        try:
            folder_metadata = drive_service.files().get(fileId=folder_id, fields="name").execute()
            main_folder_name = folder_metadata["name"]
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi l·∫•y t√™n th∆∞ m·ª•c {folder_id}: {e}")
            main_folder_name = "UnknownFolder"

        subfolders = list_subfolders(drive_service, folder_id)
        if subfolders:
            for subfolder in subfolders:
                process_images_from_folder(subfolder['id'], subfolder['name'])
        else:
            process_images_from_folder(folder_id, main_folder_name)


# ========== MAIN ==========
if __name__ == "__main__":
    process_all_folders()
